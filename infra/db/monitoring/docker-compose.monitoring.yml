# =============================================================================
# Database Monitoring Stack with Prometheus and Grafana
# =============================================================================
# This Docker Compose configuration sets up a complete monitoring stack
# for PostgreSQL database with Prometheus, Grafana, and AlertManager
# =============================================================================

version: '3.8'

services:
  # PostgreSQL Exporter for metrics collection
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: fhir-bridge-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_EXPORTER_USER}:${POSTGRES_EXPORTER_PASSWORD}@${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:fhir_bridge}?sslmode=disable"
    volumes:
      - ./postgres-exporter.yml:/etc/postgres_exporter/postgres_exporter.yml:ro
    networks:
      - monitoring
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics storage and alerting
  prometheus:
    image: prom/prometheus:latest
    container_name: fhir-bridge-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./postgres-alerts.yml:/etc/prometheus/rules/postgres-alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fhir-bridge-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager for alerting
  alertmanager:
    image: prom/alertmanager:latest
    container_name: fhir-bridge-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: fhir-bridge-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for local development
  postgres:
    image: postgres:15-alpine
    container_name: fhir-bridge-db-monitoring
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: fhir_bridge
      POSTGRES_USER: fhir_user
      POSTGRES_PASSWORD: fhir_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../init:/docker-entrypoint-initdb.d
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fhir_user -d fhir_bridge"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  postgres_data:

networks:
  monitoring:
    driver: bridge
    name: fhir-bridge-monitoring